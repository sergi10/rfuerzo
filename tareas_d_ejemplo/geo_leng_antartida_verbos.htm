<?xml version="1.0"?>
       <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "xhtml11.dtd">
       <html xmlns="http://www.w3.org/1999/xhtml"
             xml:lang="en"><head>
<meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to San."></meta>
<meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Java, University of Victoria"></meta>


<link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />


<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /> 

<title>
GEOGRAF&#x00cd;A Y LENGUA. Completa los huecos del siguiente texto sobre la Ant&#x00e1;rtida. Todas las palabras que faltan son verbos. Te damos la primera letra para que te resulte m&#x00e1;s f&#x00e1;cil, pero recuerda que debes conjugarlos en el tiempo adecuado. 
</title>

<!-- Made with executable version Java Hot Potatoes 6.1.0.5 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style type="text/css">


/* This is a modified CSS3 stylesheet for rounded corners of buttons,
the layout boxes and the input boxes in the exercise,
as well as dropshadows on buttons and draggable cards in JMix drag and drop */

   /* Modified by Stan Bogdanov - stanbogdanov@yahoo.com */
  /*  hp6.cs_            */ 
 /*  v1.5.2             */
/*  24 January 2013    */  

/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version Java Hot Potatoes 6.1.0.5 */


/* Hack to hide a nested Quicktime player from IE, which can't handle it. */
* html object.MediaPlayerNotForIE {
	display: none;
}

body{
	font-family: Geneva,Arial;
	background-color: #999999;
	color: #1c1c1c;
 
	margin-right: 1%;
	margin-left: 1%;
	font-size: small;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 100%;
}

table,div,span,td{
	font-size: 100%;
	color: #1c1c1c;
}

div.Titles{
	padding: 0.5em;;
	text-align: center;
	color: #003300;
}

button{
	font-family: Geneva,Arial;
	font-size: 100%;
	display: inline;
/* Stan_Rounded buttons */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 4px 17px;
	margin:2px;
/* Stan_Rounded buttons  END*/
}

button:link,
button:visited,
button:hover,
button:focus,
button:active {
	outline: none;
}


.ExerciseTitle{
	font-size: 100%;
	color: #003300;
}

.ExerciseSubtitle{
	font-size: 100%;
	color: #003300;
}

div.StdDiv{
	background-color: #b3bbcf;
	text-align: center;
	font-size: 100%;
	color: #1c1c1c;
	padding: 0.5em;
	border: 1px solid #ccc;
	margin-bottom: 1px;
/*Stan Rounded corners of layout boxes */	
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/*Stan Rounded corners of layout boxes */	
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", Geneva,Arial; 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", Geneva,Arial; 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", Geneva,Arial;
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: #003300;

}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: #003300;
/* Stan  rounded corners of timer */	
 -khtml-border-radius: 10px;
 -moz-border-radius: 15px;
 -webkit-border-radius: 10px;
  border-radius: 10px;
  /* Stan  rounded corners of timer end */
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: #003300;
}

.LeftItem{
	font-size: 100%;
	color: #1c1c1c;
	text-align: left;
}

.RightItem{
	font-weight: bold;
	font-size: 100%;
	color: #1c1c1c;
}

span.CorrectMark{

}


input, textarea{
	font-family: Verdana,Geneva,Arial,sans-serif;
	font-size: 100%;

/* Stan_rounded border of input boxes and textarea */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 5px;
	border:1px solid silver;
/* Stan_rounded border of input boxes and textarea END */
}

/* Stan_rounded focus border of input boxes and textarea */

input:focus, textarea:focus {
	outline: none; 
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 5px;
	border:1px solid silver;
/* Stan rounded focus border of input boxes and textarea end 8 December 2012 */	


/* Stan inset dropshade of input boxes and textarea */
	-moz-box-shadow: -1px -1px 5px #888;
	-webkit-box-shadow: -1px -1px 5px #888;
	box-shadow: -1px -1px 5px #888;
/* Stan inset dropshade of input boxes and textarea end 8 December 2012 */
	}
	
select{
	font-size: 100%;
	/* Stan - Rounded menu */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 3px 2px 3px 5px;
	border: 1px solid silver;
/* Stan - Rounded menu END */
}

select:focus {
outline:none;
}

div.Feedback {
	background-color: #999999;
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	border-color: #cec891;
	padding: 5px;
	text-align: center;
	color: #003300;
	position: absolute;
	display: none;
	font-size: 100%;
/* Stan_rounded border of feedback box */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 5px;
/* Stan_rounded border of fixed box END */
	
}




div.ExerciseDiv{
	color: #1c1c1c;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: #1c1c1c;
	border-color: #1c1c1c;
	margin-left: 5%;
	margin-right: 5%;
	margin-top: 2em;
	margin-bottom: 2em;
	width: 90%;
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: #b3bbcf;
}

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: silver;
	color: #1c1c1c;
	background-color: #b3bbcf;
}

table.FlashcardTable td.Hidden{
	display: none;
}

/* JMix styles */
div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: #1c1c1c;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: center;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: #003300;
	width: 80%;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: Geneva,Arial;
	font-size: 100%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: Geneva,Arial;
	border: 1px solid #ccc;
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 100%;
}

.Answer{
	font-size: 100%;
	letter-spacing: 0.1em;
}

.PartialAnswer{
	font-size: 100%;
	letter-spacing: 0.1em;
	color: #003300;
}

.Highlight{
	color: #000000;
	background-color: gold;
	font-weight: bold;
	font-size: 100%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em;
	border-color: #ccc;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	text-align: center;
	border: 1px solid silver;
	margin-right:2px;

	border-left-color: #d9dde7;
	border-top-color: #d9dde7;
	border-right-color: #595d67;
	border-bottom-color: #595d67;
	color: #1c1c1c;
	background-color: #b3bbcf;


	padding: 3px 6px 3px 6px;
	cursor: pointer;
/* Stan Button Shadow Dec 4 2012*/	
	-moz-box-shadow: 2px 2px 5px #888;
	-webkit-box-shadow: 2px 2px 5px #888;
	box-shadow: 2px 2px 5px #888;
/* Stan Button Shadow end */
}

.FuncButtonUp {
	text-align: center;
	border: 1px solid silver;
	margin-right:2px;

	border-left-color: #d9dde7;
	border-top-color: #d9dde7;
	border-right-color: #595d67;
	border-bottom-color: #595d67;

	background-color: #cec891;
	color: #b3bbcf;

	padding: 3px 6px 3px 6px;
	cursor: pointer;

/* Stan Button Shadow */	
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan Button Shadow end  Dec 4 2012*/
}

.FuncButtonDown {
	text-align: center;
	border:1px solid silver;
	margin-right:2px;

	border-left-color: #595d67;
	border-top-color: #595d67;
	border-right-color: #d9dde7;
	border-bottom-color: #d9dde7;
	background-color: #cec891;
	color: #b3bbcf;


	padding: 3px 6px 3px 6px;
	cursor: pointer;

/* Stan Button Shadow Dec 4 2012 */	
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan Button Shadow end */
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: #cec891;
	border: 1px solid #676448;
	text-align: center;
	margin: 2px 0px 2px 0px;
	clear: both;
	font-size: 100%;

/* Stan Rounded corner of Nav Bar */	
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/* Stan Rounded corner of Nav Bar  end */
/* Stan NavBar Shadow Dec 6 2012 */	
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan navBar Shadow end  Dec 6 2012 */
padding:1px;
}

.NavButton {
	border: 1px solid silver;
	
	border-left-color: #e6e3c8;
	border-top-color: #e6e3c8;
	border-right-color: #676448;
	border-bottom-color: #676448;
	background-color: #cec891;
	color: #000000;


	cursor: pointer;	
/* Stan Shadow on buttons Dec 4 2012 */	
-moz-box-shadow: 2px 2px 5px #676448;
-webkit-box-shadow: 2px 2px 5px #676448;
box-shadow: 2px 2px 5px #676448;
/* Stan Shadow on buttons end */
}

.NavButtonUp {
	border:1px solid silver;

	border-left-color: #e6e3c8;
	border-top-color: #e6e3c8;
	border-right-color: #676448;
	border-bottom-color: #676448;
	color: #cec891;
	background-color: #b3bbcf;

	cursor: pointer;	
/* Stan Shadow on buttons Dec 4 2012 */
	-moz-box-shadow: -2px -2px 5px #676448;
	-webkit-box-shadow: -2px -2px 5px #676448;
	box-shadow: -2px -2px 5px #676448;
/* Stan Shadow on buttons end */
}

.NavButtonDown {
	border: 1px solid silver;

	border-left-color: #676448;
	border-top-color: #676448;
	border-right-color: #e6e3c8;
	border-bottom-color: #e6e3c8;
	color: #cec891;
	background-color: #b3bbcf;

	cursor: pointer;
/* Stan Shadow on buttons Dec 4 2012 */
	-moz-box-shadow: -2px -2px 5px #676448;
	-webkit-box-shadow: -2px -2px 5px #676448;
	box-shadow: -2px -2px 5px #676448;
/* Stan Shadow on buttons end */	
}

/*EndNavBarStyle*/

a{
	color: #5651b5;
}

a:visited{
	color: #5e96b0;
}

a:hover{
	color: #5651b5;
}

div.CardStyle {
	position: absolute;
	font-family: Geneva,Arial;
	font-size: 100%;
	padding: 5px;
	border: 1px solid silver;
	color: #1c1c1c;
	background-color: #b3bbcf;
	left: -50px;
	top: -50px;
	overflow: visible;
	
/* Stan_rounded border of cards */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/* Stan_rounded border of cards END */

/* Stan card Shadow Dec 4 2012 */
-moz-box-shadow:-2px -2px 2px #888;
-webkit-box-shadow: -2px -2px 2px #888;
box-shadow: -2px -2px 2px #888;
/* Stan card Shadow end */
}

.rtl{
	text-align: right;
	font-size: 140%;
}


</style>

<script type="text/javascript">

//<![CDATA[

<!--




function Client(){
//if not a DOM browser, hopeless
	this.min = false; if (document.getElementById){this.min = true;};

	this.ua = navigator.userAgent;
	this.name = navigator.appName;
	this.ver = navigator.appVersion;  

//Get data about the browser
	this.mac = (this.ver.indexOf('Mac') != -1);
	this.win = (this.ver.indexOf('Windows') != -1);

//Look for Gecko
	this.gecko = (this.ua.indexOf('Gecko') > 1);
	if (this.gecko){
		this.geckoVer = parseInt(this.ua.substring(this.ua.indexOf('Gecko')+6, this.ua.length));
		if (this.geckoVer < 20020000){this.min = false;}
	}
	
//Look for Firebird
	this.firebird = (this.ua.indexOf('Firebird') > 1);
	
//Look for Safari
	this.safari = (this.ua.indexOf('Safari') > 1);
	if (this.safari){
		this.gecko = false;
	}
	
//Look for IE
	this.ie = (this.ua.indexOf('MSIE') > 0);
	if (this.ie){
		this.ieVer = parseFloat(this.ua.substring(this.ua.indexOf('MSIE')+5, this.ua.length));
		if (this.ieVer < 5.5){this.min = false;}
	}
	
//Look for Opera
	this.opera = (this.ua.indexOf('Opera') > 0);
	if (this.opera){
		this.operaVer = parseFloat(this.ua.substring(this.ua.indexOf('Opera')+6, this.ua.length));
		if (this.operaVer < 7.04){this.min = false;}
	}
	if (this.min == false){
		//alert('Your browser may not be able to handle this page.');
	}
	
//Special case for the horrible ie5mac
	this.ie5mac = (this.ie&&this.mac&&(this.ieVer<6));
}

var C = new Client();

//for (prop in C){
//	alert(prop + ': ' + C[prop]);
//}



//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

//[strNavBarJS]
function NavBtnOver(Btn){
	if (Btn.className != 'NavButtonDown'){Btn.className = 'NavButtonUp';}
}

function NavBtnOut(Btn){
	Btn.className = 'NavButton';
}

function NavBtnDown(Btn){
	Btn.className = 'NavButtonDown';
}
//[/strNavBarJS]

function FuncBtnOver(Btn){
	if (Btn.className != 'FuncButtonDown'){Btn.className = 'FuncButtonUp';}
}

function FuncBtnOut(Btn){
	Btn.className = 'FuncButton';
}

function FuncBtnDown(Btn){
	Btn.className = 'FuncButtonDown';
}

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
				//get Mac FireFox to manipulate display, to force screen redraw
				if (C.mac && C.gecko) {Els[i].style.display = '';}
			}
			else{
				Els[i].style.visibility = 'hidden';
				if (C.mac && C.gecko) {Els[i].style.display = 'none';}
			}
		} 
		else {
			// tagName is either input or select (that is, Form Elements)
			// ie6 has a problem with Form elements, so manipulate those
			if (C.ie) {
				if (C.ieVer < 7) {
					if (Show == true){
						Els[i].style.visibility = 'visible';
					}
					else{
						Els[i].style.visibility = 'hidden';
					}
				}
			}
		}
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
	if (Finished == true){
		Finish();
	}
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].clientWidth;
	this.H = document.getElementsByTagName('body')[0].clientHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	if (C.ie) {
		thisKey = window.event.keyCode;
	}
	else {
		thisKey = e.keyCode;
	}

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
	}

	if (Suppress == true){
		if (C.ie){
			window.event.returnValue = false;	
			window.event.cancelBubble = true;
		}
		else{
			e.preventDefault();
		}
	}
}

if (C.ie){
	document.attachEvent('onkeydown',SuppressBackspace);
	window.attachEvent('onkeydown',SuppressBackspace);
}
else{
	if (window.addEventListener){
		window.addEventListener('keypress',SuppressBackspace,false);
	}
}

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}

//EXTENSION TO ARRAY OBJECT
function Array_IndexOf(Input){
	var Result = -1;
	for (var i=0; i<this.length; i++){
		if (this[i] == Input){
			Result = i;
		}
	}
	return Result;
}
Array.prototype.indexOf = Array_IndexOf;

//IE HAS RENDERING BUG WITH BOTTOM NAVBAR
function RemoveBottomNavBarForIE(){
	if ((C.ie)&&(document.getElementById('Reading') != null)){
		if (document.getElementById('BottomNavBar') != null){
			document.getElementById('TheBody').removeChild(document.getElementById('BottomNavBar'));
		}
	}
}




//HOTPOTNET-RELATED CODE

var HPNStartTime = (new Date()).getTime();
var SubmissionTimeout = 30000;
var Detail = ''; //Global that is used to submit tracking data

function Finish(){
//If there's a form, fill it out and submit it
	if (document.store != null){
		Frm = document.store;
		Frm.starttime.value = HPNStartTime;
		Frm.endtime.value = (new Date()).getTime();
		Frm.mark.value = Score;
		Frm.detail.value = Detail;
		Frm.submit();
	}
}





//JCLOZE CORE JAVASCRIPT CODE

function ItemState(){
	this.ClueGiven = false;
	this.HintsAndChecks = 0;
	this.MatchedAnswerLength = 0;
	this.ItemScore = 0;
	this.AnsweredCorrectly = false;
	this.Guesses = new Array();
	return this;
}

var Feedback = '';
var Correct = '\u00a1Perfecto! Buen trabajo';
var Incorrect = 'Algunas respuestas est\u00e1n incorrectas. Int\u00e9ntalo de nuevo.'; 
var GiveHint = 'Fue a\u00f1adida la siguiente letra';
var CaseSensitive = true;
var YourScoreIs = '<br>Tu puntuaci\u00f3n es: ';
var Finished = false;
var Locked = false;
var Score = 0;
var CurrentWord = 0;
var Guesses = '';
var TimeOver = false;

I = new Array();
I=new Array();
I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0] = '\u006e\u0063\u0075\u0065\u006e\u0074\u0072\u0061';
I[0][2] = '';
I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0] = '\u0069\u0065\u006e\u0065';
I[1][2] = '';
I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0] = '\u006f\u006e\u0067\u0065\u006c\u0061\u006e';
I[2][2] = '';
I[3] = new Array();
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0] = '\u0075\u0062\u0072\u0065';
I[3][2] = '';
I[4] = new Array();
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0] = '\u006f\u0062\u0072\u0065\u0073\u0061\u006c\u0065\u006e';
I[4][2] = '';
I[5] = new Array();
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0] = '\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061';
I[5][2] = '';
I[6] = new Array();
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0] = '\u0075\u006e\u0064\u0069\u0065\u0072\u0061';
I[6][2] = '';
I[7] = new Array();
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0] = '\u0075\u006d\u0065\u006e\u0074\u0061\u0072\u00ed\u0061';
I[7][2] = '';
I[8] = new Array();
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0] = '\u0075\u0065\u0064\u0061\u0072\u00ed\u0061\u006e';
I[8][2] = '';
I[9] = new Array();
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0] = '\u0069\u0065\u006e\u0065';
I[9][2] = '';
I[10] = new Array();
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0] = '\u006f\u0062\u0072\u0065\u0076\u0069\u0076\u0065\u006e';
I[10][2] = '';
I[11] = new Array();
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0] = '\u0065\u0073\u0070\u0065\u0072\u0074\u0061\u0064\u006f';
I[11][2] = '';
I[12] = new Array();
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0] = '\u0078\u0070\u006c\u006f\u0074\u0061\u0072';
I[12][2] = '';
I[13] = new Array();
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0] = '\u006d\u0070\u0065\u0064\u0069\u0072';
I[13][2] = '';
I[14] = new Array();
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0] = '\u0069\u0072\u006d\u00f3';
I[14][2] = '';
I[15] = new Array();
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0] = '\u0072\u006f\u0068\u0069\u0062\u0069\u00f3';
I[15][2] = '';
I[16] = new Array();
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0] = '\u0061\u0062\u0069\u0074\u0061\u006e';
I[16][2] = '';


State = new Array();

function StartUp(){
	RemoveBottomNavBarForIE();
//Show a keypad if there is one	(added bugfix for 6.0.4.12)
	if (document.getElementById('CharacterKeypad') != null){
		document.getElementById('CharacterKeypad').style.display = 'block';
	}
	






	var i = 0;

	State.length = 0;
	for (i=0; i<I.length; i++){
		State[i] = new ItemState();
	}
	
	ClearTextBoxes();
	


}

function ShowClue(ItemNum){
	if (Locked == true){return;}
	State[ItemNum].ClueGiven = true;
	ShowMessage(I[ItemNum][2]);
}

function SaveCurrentAnswers(){
	var Ans = '';
	for (var i=0; i<I.length; i++){
		Ans = GetGapValue(i);
		if ((Ans.length > 0)&&(Ans != State[i].Guesses[State[i].Guesses.length-1])){
			State[i].Guesses[State[i].Guesses.length] = Ans;
		}
	}
}

function CompileGuesses(){
	var F = document.getElementById('store');
	if (F != null){
		var Temp = '<?xml version="1.0"?><hpnetresult><fields>';
		var GapLabel = '';
		for (var i=0; i<State.length; i++){
			GapLabel = 'Gap ' + (i+1).toString();
			Temp += '<field><fieldname>' + GapLabel + '</fieldname>';
			Temp += '<fieldtype>student-responses</fieldtype><fieldlabel>' + GapLabel + '</fieldlabel>';
			Temp += '<fieldlabelid>JClozeStudentResponses</fieldlabelid><fielddata>';
			for (var j=0; j<State[i].Guesses.length; j++){
				if (j>0){Temp += '| ';}
				Temp += State[i].Guesses[j] + ' ';	
			}	
  		Temp += '</fielddata></field>';
		}
		Temp += '</fields></hpnetresult>';
		Detail = Temp;
	}
}

function CheckAnswers(){
	if (Locked == true){return;}
	SaveCurrentAnswers();
	var AllCorrect = true;

//Check each answer
	for (var i = 0; i<I.length; i++){

		if (State[i].AnsweredCorrectly == false){
//If it's right, calculate its score
			if (CheckAnswer(i, true) > -1){
				var TotalChars = GetGapValue(i).length;
				State[i].ItemScore = (TotalChars-State[i].HintsAndChecks)/TotalChars;
				if (State[i].ClueGiven == true){State[i].ItemScore /= 2;}
				if (State[i].ItemScore <0 ){State[i].ItemScore = 0;}
				State[i].AnsweredCorrectly = true;
//Drop the correct answer into the page, replacing the text box
				SetCorrectAnswer(i, GetGapValue(i));
			}
			else{
//Otherwise, increment the hints for this item, as a penalty
				State[i].HintsAndChecks++;

//then set the flag
				AllCorrect = false;
			}
		}
	}

//Calculate the total score
	var TotalScore = 0;
	for (i=0; i<State.length; i++){
		TotalScore += State[i].ItemScore;
	}
	TotalScore = Math.floor((TotalScore * 100)/I.length);

//Compile the output
	Output = '';

	if (AllCorrect == true){
		Output = Correct + '<br />';
	}

	Output += YourScoreIs + ' ' + TotalScore + '%.<br />';
	if (AllCorrect == false){
		Output += '<br />' + Incorrect;
	}
	ShowMessage(Output);
	setTimeout('WriteToInstructions(Output)', 50);
	
	Score = TotalScore;
	CompileGuesses();
	
	if ((AllCorrect == true)||(Finished == true)){
	


		TimeOver = true;
		Locked = true;
		Finished = true;
		setTimeout('Finish()', SubmissionTimeout);
	}

}

function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
	InTextBox = true;
}

function LeaveGap(){
	InTextBox = false;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = Guess.toUpperCase();
		UpperAnswer = Answer.toUpperCase();
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function GetGapValue(GNum){
	var RetVal = '';
	if ((GNum<0)||(GNum>=I.length)){return RetVal;}
	if (document.getElementById('Gap' + GNum) != null){
		RetVal = document.getElementById('Gap' + GNum).value;
		RetVal = TrimString(RetVal);
	}
	else{
		RetVal = State[GNum].Guesses[State[GNum].Guesses.length-1];
	}
	return RetVal;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (document.getElementById('Gap' + GNum) != null){
		document.getElementById('Gap' + GNum).value = Val;
		document.getElementById('Gap' + GNum).focus();
	}
}

function SetCorrectAnswer(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (document.getElementById('GapSpan' + GNum) != null){
		document.getElementById('GapSpan' + GNum).innerHTML = Val;
	}
}

function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;

//Test the current word:
//If its state is not set to already correct, check the word.
	if (State[CurrentWord].AnsweredCorrectly == false){
		if (CheckAnswer(CurrentWord, false) < 0){
			return CurrentWord;
		}
	}
	
	x=CurrentWord + 1;
	while (x<I.length){
		if (State[x].AnsweredCorrectly == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}

	x = 0;
	while (x<CurrentWord){
		if (State[x].AnsweredCorrectly == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}
	return FoundCurrent;
}

function CheckAnswer(GapNum, MarkAnswer){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = Guess.toUpperCase();
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var i = 0; i<I[GapNum][1].length; i++){
		if (CaseSensitive == false){
			UpperAnswer = I[GapNum][1][i][0].toUpperCase();
		}
		else{
			UpperAnswer = I[GapNum][1][i][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = i;
			if (MarkAnswer == true){
				State[GapNum].AnsweredCorrectly = true;
			}
		}
	}
	return Match;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum, false) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	var Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
//Add another char if the last one is a space
	if (Result.charAt(Result.length-1) == ' '){
		Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length+1);
	}
	return Result;
}

function ShowHint(){
	if (document.getElementById('FeedbackDiv').style.display == 'block'){return;}
	if (Locked == true){return;}
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		State[CurrGap].HintsAndChecks += 1;
	}
	ShowMessage(GiveHint);
}

function TypeChars(Chars){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}
	if (document.getElementById('Gap' + CurrGap) != null){
		SetGapValue(CurrGap, document.getElementById('Gap' + CurrGap).value + Chars);
	}
}







//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">




<button class="NavButton" onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)"  onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOut(this)" onclick="location='../index.html'; return false;"> Volver al &#x00ed;ndice </button>




</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">GEOGRAF&#x00cd;A Y LENGUA. Completa los huecos del siguiente texto sobre la Ant&#x00e1;rtida. Todas las palabras que faltan son verbos. Te damos la primera letra para que te resulte m&#x00e1;s f&#x00e1;cil, pero recuerda que debes conjugarlos en el tiempo adecuado. </h2>

	<h3 class="ExerciseSubtitle">Ejercicio de completar frases</h3>



</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions">Escribe en los espacios en blanco las palabras adecuadas.</div>
</div>




<div id="WordsDiv" class="StdDiv">
<span id="WordList" class="ClozeWordList">&#0160;&#0160; abitan&#0160;&#0160; &#0160;&#0160; epresenta&#0160;&#0160; &#0160;&#0160; espertado&#0160;&#0160; &#0160;&#0160; iene&#0160;&#0160; &#0160;&#0160; iene&#0160;&#0160; &#0160;&#0160; irm&#x00f3;&#0160;&#0160; &#0160;&#0160; mpedir&#0160;&#0160; &#0160;&#0160; ncuentra&#0160;&#0160; &#0160;&#0160; obresalen&#0160;&#0160; &#0160;&#0160; obreviven&#0160;&#0160; &#0160;&#0160; ongelan&#0160;&#0160; &#0160;&#0160; rohibi&#x00f3;&#0160;&#0160; &#0160;&#0160; ubre&#0160;&#0160; &#0160;&#0160; uedar&#x00ed;an&#0160;&#0160; &#0160;&#0160; umentar&#x00ed;a&#0160;&#0160; &#0160;&#0160; undiera&#0160;&#0160; &#0160;&#0160; xplotar&#0160;&#0160; </span>
</div>


<div id="MainDiv" class="StdDiv">

<!-- These top buttons hidden; reveal if required -->
<!--
<button id="CheckButton1" class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="CheckAnswers()">&nbsp;Verificar&nbsp;</button>



 -->
 
<div id="ClozeDiv">
<form id="Cloze" method="post" action="" onsubmit="return false;">
<div class="ClozeBody">
La Ant&#x00e1;rtida se e<span class="GapSpan" id="GapSpan0"><input type="text" class="GapBox" id="Gap0" onfocus="TrackFocus(0)" onblur="LeaveGap()" size="9" ></input></span> completamente en el hemisferio sur. Con unos 14 millones de kil&#x00f3;metros cuadrados, t<span class="GapSpan" id="GapSpan1"><input type="text" class="GapBox" id="Gap1" onfocus="TrackFocus(1)" onblur="LeaveGap()" size="9" ></input></span> una extensi&#x00f3;n superior a la de Europa. En invierno se c<span class="GapSpan" id="GapSpan2"><input type="text" class="GapBox" id="Gap2" onfocus="TrackFocus(2)" onblur="LeaveGap()" size="9" ></input></span> las aguas que circundan la Ant&#x00e1;rtida y el continente dobla su tama&#x00f1;o. 
La Ant&#x00e1;rtida es el continente de mayor altitud media: 2000 metros. Sin embargo, una capa de hielo, o inlandsis, c<span class="GapSpan" id="GapSpan3"><input type="text" class="GapBox" id="Gap3" onfocus="TrackFocus(3)" onblur="LeaveGap()" size="9" ></input></span> su relieve. Esta capa de hielo tiene un espesor de 1700 metros de media, pero llega a sobrepasar los 4000 metros en algunos puntos. El hielo cubre el 98% del continente. Por encima de &#x00e9;l, solo s<span class="GapSpan" id="GapSpan4"><input type="text" class="GapBox" id="Gap4" onfocus="TrackFocus(4)" onblur="LeaveGap()" size="9" ></input></span> las cimas m&#x00e1;s elevadas, como el monte Vinson. 
 El hielo de la Ant&#x00e1;rtida r<span class="GapSpan" id="GapSpan5"><input type="text" class="GapBox" id="Gap5" onfocus="TrackFocus(5)" onblur="LeaveGap()" size="9" ></input></span> el 70% del agua dulce de nuestro planeta. Si se f<span class="GapSpan" id="GapSpan6"><input type="text" class="GapBox" id="Gap6" onfocus="TrackFocus(6)" onblur="LeaveGap()" size="9" ></input></span>, el nivel del mar a<span class="GapSpan" id="GapSpan7"><input type="text" class="GapBox" id="Gap7" onfocus="TrackFocus(7)" onblur="LeaveGap()" size="9" ></input></span> entre 60 y 80 metros, y las costas q<span class="GapSpan" id="GapSpan8"><input type="text" class="GapBox" id="Gap8" onfocus="TrackFocus(8)" onblur="LeaveGap()" size="9" ></input></span> inundadas.  
La Ant&#x00e1;rtida t<span class="GapSpan" id="GapSpan9"><input type="text" class="GapBox" id="Gap9" onfocus="TrackFocus(9)" onblur="LeaveGap()" size="9" ></input></span> el clima m&#x00e1;s fr&#x00ed;o del mundo. Por eso, es una zona dif&#x00ed;cil para la vida. Solo algunos l&#x00ed;quenes, algas y musgos y unos pocos animales, como los ping&#x00fc;inos, las focas y los elefantes marinos s<span class="GapSpan" id="GapSpan10"><input type="text" class="GapBox" id="Gap10" onfocus="TrackFocus(10)" onblur="LeaveGap()" size="9" ></input></span> en las rocas de las costas. 
Pero la Ant&#x00e1;rtida es un continente con abundantes recursos naturales en el subsuelo (petr&#x00f3;leo, minerales), lo que ha d<span class="GapSpan" id="GapSpan11"><input type="text" class="GapBox" id="Gap11" onfocus="TrackFocus(11)" onblur="LeaveGap()" size="9" ></input></span> el inter&#x00e9;s de muchos pa&#x00ed;ses por poseer y e<span class="GapSpan" id="GapSpan12"><input type="text" class="GapBox" id="Gap12" onfocus="TrackFocus(12)" onblur="LeaveGap()" size="9" ></input></span> ese continente. Para i<span class="GapSpan" id="GapSpan13"><input type="text" class="GapBox" id="Gap13" onfocus="TrackFocus(13)" onblur="LeaveGap()" size="9" ></input></span> el deterioro de este espacio, en 1991 se f<span class="GapSpan" id="GapSpan14"><input type="text" class="GapBox" id="Gap14" onfocus="TrackFocus(14)" onblur="LeaveGap()" size="9" ></input></span> el Tratado de Washington, que p<span class="GapSpan" id="GapSpan15"><input type="text" class="GapBox" id="Gap15" onfocus="TrackFocus(15)" onblur="LeaveGap()" size="9" ></input></span> la explotaci&#x00f3;n de la Ant&#x00e1;rtida durante cincuenta a&#x00f1;os. Por eso, solo h<span class="GapSpan" id="GapSpan16"><input type="text" class="GapBox" id="Gap16" onfocus="TrackFocus(16)" onblur="LeaveGap()" size="9" ></input></span> en la Ant&#x00e1;rtida unos peque&#x00f1;os grupos de cient&#x00ed;ficos. 


</div>
</form>
</div>



<button id="CheckButton2" class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="CheckAnswers()">&nbsp;Verificar&nbsp;</button>



</div>



<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onfocus="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseover="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">




<button class="NavButton" onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)"  onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOut(this)" onclick="location='../index.html'; return false;"> Volver al &#x00ed;ndice </button>




</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>












